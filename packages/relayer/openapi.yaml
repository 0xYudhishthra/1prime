openapi: 3.0.3
info:
  title: 1Prime Relayer Service API
  description: |
    A 1inch Fusion+ compatible relayer service that facilitates cross-chain atomic swaps between EVM chains (Ethereum, Base, BSC, Polygon, Arbitrum) and NEAR Protocol.

    This implementation follows the 1inch Fusion+ whitepaper architecture with per-swap HTLC deployment for secure cross-chain atomic swaps.

    ## Features
    - Dutch Auction Management with gas-adjusted custom curves
    - Partial Fill Support with Merkle tree-based N+1 secret management  
    - Cross-chain Escrow Verification
    - Real-time WebSocket updates
    - Modular chain support for EVM and NEAR

    ## Supported Chain Pairs
    - Ethereum ↔ NEAR
    - Base ↔ NEAR
    - BSC ↔ NEAR
    - Polygon ↔ NEAR
    - Arbitrum ↔ NEAR
  version: 1.0.0
  contact:
    name: 1Prime Team
    url: https://github.com/unite-defi
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://1prime-relayer.up.railway.app/api/v1
    description: Production server (Railway)

paths:
  /:
    get:
      summary: API Documentation
      description: Get comprehensive API documentation and available endpoints
      operationId: getApiDocumentation
      tags:
        - Documentation
      responses:
        "200":
          description: API documentation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  service: "1Prime Relayer Service"
                  version: "1.0.0"
                  description: "1inch Fusion+ compatible relayer for EVM ↔ NEAR cross-chain atomic swaps"
                  documentation: "https://github.com/unite-defi"
                  whitepaper: "https://1inch.io/assets/1inch-fusion-plus.pdf"
                  timestamp: 1640995200000
                  status: "active"
                  websocket:
                    enabled: true
                    endpoint: "/ws"
                    events:
                      [
                        "order_created",
                        "order_updates",
                        "auction_started",
                        "auction_progress",
                        "phase_transition",
                        "secret_revealed",
                        "order_completed",
                        "order_cancelled",
                      ]
                  endpoints:
                    "GET /health": "Get relayer health status and chain connectivity"
                    "POST /orders/prepare": "Generate unsigned Fusion+ order for frontend signing"
                    "POST /orders/submit": "Submit signed Fusion+ order to relayer"
                    "GET /orders": "Get all currently active orders"
                    "GET /orders/{hash}/status": "Get order status and details"
                    "GET /orders/{hash}/verify-escrows": "Verify escrows are safe for secret revelation"
                    "POST /orders/{hash}/claim": "Claim order for resolver processing"
                    "POST /orders/{hash}/escrow-deployed": "Confirm escrow deployment"
                    "POST /orders/{hash}/state": "Update order state"
                    "POST /orders/{hash}/reveal-secret": "Request secret revelation"
                    "POST /bids": "Submit resolver bid for order execution"
                    "POST /resolvers": "Register new resolver for order execution"
                    "GET /auctions/{orderHash}": "Get auction information for specific order"
                    "GET /stats": "Get system statistics and performance metrics"
                    "GET /ws-info": "Get WebSocket connection details and supported events"
                  features:
                    "Dutch Auctions": "Competitive bidding with resolver selection"
                    "Per-Swap HTLCs": "Dynamic escrow contract deployment for each swap"
                    "Cross-Chain": "EVM ↔ NEAR bidirectional atomic swaps"
                    "SDK Integration": "Native support for 1inch Fusion+ SDK orders"
                    "Real-time Updates": "WebSocket support for live order tracking"
                    "Security Verification": "Independent on-chain escrow verification before secret reveal"
                    "State Management": "Complete order lifecycle tracking with phase transitions"
                  supportedChains:
                    evm: ["ethereum", "base", "bsc", "polygon", "arbitrum"]
                    near: ["near", "near-testnet"]
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /health:
    get:
      summary: Health Check
      description: Returns the health status of the relayer service and all connected chains
      operationId: getHealth
      tags:
        - Health
      responses:
        "200":
          description: Service health status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
              example:
                status: "healthy"
                timestamp: 1640995200000
                version: "1.0.0"
                chains:
                  ethereum:
                    connected: true
                    blockNumber: 18500000
                    latency: 120
                  near:
                    connected: true
                    blockNumber: 105000000
                    latency: 80
                activeOrders: 12
                completedOrders: 1543
                errorRate: 0.02

  /orders:
    get:
      summary: Get Active Orders
      description: Retrieve all currently active orders
      operationId: getActiveOrders
      tags:
        - Orders
      responses:
        "200":
          description: Active orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  - orderHash: "0x123..."
                    maker: "0xabc..."
                    sourceChain: "ethereum"
                    destinationChain: "near"
                    sourceAmount: "1000000000000000000"
                    destinationAmount: "100000000000000000000000000"
                    phase: "submitted"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/prepare:
    post:
      summary: Generate Unsigned Order
      description: |
        Generate an unsigned Fusion+ order for frontend signing (Steps 3+4+5 of the cross-chain flow).

        This endpoint uses the 1inch SDK internally to create a properly structured CrossChainOrder
        with HashLock, TimeLocks, and AuctionDetails. The frontend then signs this order.
      operationId: generateOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateOrderRequest"
            example:
              userAddress: "0x742d35Cc6B3e6F1b8e0A8D6d1e5E"
              amount: "1000000000000000000"
              fromToken: "ETH"
              toToken: "NEAR"
              fromChain: "ethereum"
              toChain: "near"
              secretHash: "0xabc123..."
      responses:
        "200":
          description: Unsigned order generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  orderHash: "0x123..."
                  fusionOrder:
                    inner:
                      settlementExtensionContract:
                        val: "0x..."
                      inner:
                        makerAsset:
                          val: "0x..."
                        takerAsset:
                          val: "0x..."
                        makingAmount: "1000000000000000000"
                        takingAmount: "100000000000000000000000000"
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/submit:
    post:
      summary: Submit Signed Order
      description: |
        Submit a signed Fusion+ order to the relayer (Step 6 of the cross-chain flow).

        The order must be signed by the frontend using the unsigned order from /orders/prepare.
      operationId: submitSignedOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitSignedOrderRequest"
            example:
              orderHash: "0x123..."
              signedOrder:
                inner:
                  settlementExtensionContract:
                    val: "0x..."
                  inner:
                    makerAsset:
                      val: "0x..."
                    takerAsset:
                      val: "0x..."
                    makingAmount: "1000000000000000000"
                    takingAmount: "100000000000000000000000000"
              signature: "0x..."
      responses:
        "201":
          description: Signed order submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  orderHash: "0x123..."
                  phase: "submitted"
                  isCompleted: false
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/status:
    get:
      summary: Get Order Status
      description: Retrieve the current status and details of a specific order
      operationId: getOrderStatus
      tags:
        - Orders
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{64}$"
          example: "123abc..."
      responses:
        "200":
          description: Order status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  orderHash: "0x123..."
                  phase: "src_escrow_deployed"
                  sourceEscrow:
                    orderHash: "0x123..."
                    chain: "ethereum"
                    contractAddress: "0xabc..."
                    amount: "1000000000000000000"
                    isCreated: true
                  destinationEscrow:
                    orderHash: "0x123..."
                    chain: "near"
                    contractAddress: "escrow.near"
                    amount: "100000000000000000000000000"
                    isCreated: true
                  auction:
                    startTime: 1640995200000
                    currentRate: 0.85
                    isActive: false
                    winner: "0xdef..."
                  isCompleted: false
                timestamp: 1640995200000
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/verify-escrows:
    get:
      summary: Verify Escrows Safety
      description: |
        Perform independent on-chain verification that both source and destination escrows 
        are safe for secret revelation. This is a critical security endpoint that the frontend
        MUST call before revealing any secrets.

        **Security Features:**
        - Verifies contract existence on both chains
        - Checks escrow parameters (amount, token, secret hash)
        - Validates escrow funding status
        - Detects if escrows have already been withdrawn or cancelled
        - Confirms escrow state matches expected conditions

        **NEAR Verification:** Uses NEAR API to call `get_escrow_info()` and verify state
        **EVM Verification:** Uses 1inch contract events to detect withdrawals/cancellations
      operationId: verifyEscrowSafety
      tags:
        - Security
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{64}$"
          example: "123abc..."
      responses:
        "200":
          description: Escrow verification completed (check safe field for result)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscrowVerificationResponse"
              examples:
                safe:
                  summary: Escrows are safe
                  value:
                    success: true
                    data:
                      safe: true
                      orderHash: "0x123..."
                      srcEscrowVerified: true
                      dstEscrowVerified: true
                      verification:
                        srcEscrowDetails:
                          escrowAddress: "0x456..."
                          chainName: "ethereum"
                          contractExists: true
                          amountMatches: true
                          tokenMatches: true
                          secretHashMatches: true
                          properlyFunded: true
                        dstEscrowDetails:
                          escrowAddress: "escrow.near"
                          chainName: "near"
                          contractExists: true
                          amountMatches: true
                          tokenMatches: true
                          secretHashMatches: true
                          properlyFunded: true
                      message: "Safe to reveal secret"
                    timestamp: 1640995200000
                unsafe:
                  summary: Escrows are not safe
                  value:
                    success: false
                    data:
                      safe: false
                      orderHash: "0x123..."
                      srcEscrowVerified: false
                      dstEscrowVerified: true
                      issues:
                        - "❌ Escrow already withdrawn! Secret revealed: 0xabc123..."
                        - "❌ Insufficient ETH balance: expected 1000000000000000000, got 0"
                      message: "NOT safe to reveal secret"
                    timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/claim:
    post:
      summary: Claim Order
      description: |
        Claim an order for resolver processing (Step 7 of the cross-chain flow).

        Only registered resolvers can claim orders. This transitions the order
        to "claimed" phase and assigns it to the resolver.
      operationId: claimOrder
      tags:
        - Resolvers
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{64}$"
          example: "123abc..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClaimOrderRequest"
            example:
              resolverAddress: "0xdef..."
              estimatedGas: 150000
              signature: "0x..."
      responses:
        "200":
          description: Order claimed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  claimed: true
                  orderHash: "0x123..."
                  resolverAddress: "0xdef..."
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/escrow-deployed:
    post:
      summary: Confirm Escrow Deployment
      description: |
        Confirm that an escrow has been deployed (Steps 7.1 & 9.1 of the cross-chain flow).

        Resolvers call this endpoint after deploying source or destination escrows
        to update the order state and provide deployment details.
      operationId: confirmEscrowDeployment
      tags:
        - Resolvers
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{64}$"
          example: "123abc..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EscrowDeploymentConfirmation"
            example:
              escrowType: "src"
              escrowAddress: "0x789..."
              transactionHash: "0xdef..."
              blockNumber: 18500000
              resolverAddress: "0xabc..."
              signature: "0x..."
      responses:
        "200":
          description: Escrow deployment confirmed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  confirmed: true
                  orderHash: "0x123..."
                  escrowType: "src"
                  escrowAddress: "0x789..."
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/state:
    post:
      summary: Update Order State
      description: |
        Update the order state (Step 9 of the cross-chain flow).

        Resolvers use this endpoint to transition orders to "waiting-for-secret"
        or other states as the cross-chain swap progresses.
      operationId: updateOrderState
      tags:
        - Resolvers
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{64}$"
          example: "123abc..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStateRequest"
            example:
              newState: "waiting-for-secret"
              resolverAddress: "0xdef..."
      responses:
        "200":
          description: Order state updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  updated: true
                  orderHash: "0x123..."
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/reveal-secret:
    post:
      summary: Request Secret Reveal
      description: |
        Request revelation of order secret after escrow verification (Step 11 of the cross-chain flow).

        **IMPORTANT:** Frontend MUST call `/orders/{hash}/verify-escrows` first to ensure
        it's safe to reveal the secret. Revealing secrets to unsafe escrows results in loss of funds.
      operationId: requestSecretReveal
      tags:
        - Security
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{64}$"
          example: "123abc..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretRevealRequest"
            example:
              secret: "secret-value-123"
              proof: "merkle-proof-string"
              signature: "0x..."
      responses:
        "200":
          description: Secret reveal processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  secret: "revealed-secret-value"
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          description: Conditions not met for secret reveal
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: false
                error: "Escrow verification not complete"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /bids:
    post:
      summary: Submit Resolver Bid
      description: Submit a bid for an active auction as a KYC'd resolver
      operationId: submitResolverBid
      tags:
        - Resolvers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResolverBidRequest"
            example:
              orderHash: "0x123..."
              resolver: "0xdef..."
              estimatedGas: 150000
              signature: "0x..."
      responses:
        "200":
          description: Bid submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  bidAccepted: true
                  auctionWon: true
                  finalRate: 0.85
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          description: Resolver not authorized (KYC required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: false
                error: "Resolver must be KYC verified"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /resolvers:
    post:
      summary: Register Resolver
      description: Register a new resolver with KYC and reputation information
      operationId: registerResolver
      tags:
        - Resolvers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterResolverRequest"
            example:
              address: "0xdef..."
              isKyc: true
              bondAmount: "1000000000000000000000"
              tier: 2
              reputation: 95
      responses:
        "201":
          description: Resolver registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  address: "0xdef..."
                  registered: true
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Resolver already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: false
                error: "Resolver already registered"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /auctions/{orderHash}:
    get:
      summary: Get Auction Information
      description: Retrieve detailed auction information for a specific order
      operationId: getAuctionInfo
      tags:
        - Orders
      parameters:
        - name: orderHash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^0x[a-fA-F0-9]{64}$"
          example: "0x123abc..."
      responses:
        "200":
          description: Auction information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  orderHash: "0x123..."
                  startTime: 1640995200000
                  duration: 300000
                  initialRateBump: 1000
                  currentRate: 0.85
                  isActive: true
                  participatingResolvers: ["0xabc...", "0xdef..."]
                  winner: "0xdef..."
                  finalRate: 0.82
                timestamp: 1640995200000
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /stats:
    get:
      summary: Get System Statistics
      description: Retrieve overall system statistics and performance metrics
      operationId: getSystemStats
      tags:
        - Health
      responses:
        "200":
          description: System statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  activeOrders: 12
                  completedOrders: 1543
                  totalVolume: "50000000000000000000000"
                  errorRate: 0.02
                  uptime: 86400000
                  chains:
                    ethereum:
                      connected: true
                      blockNumber: 18500000
                      latency: 120
                    near:
                      connected: true
                      blockNumber: 105000000
                      latency: 80
                  performance:
                    avgOrderCompletionTime: 600000
                    avgAuctionDuration: 120000
                    resolverCount: 25
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /ws-info:
    get:
      summary: WebSocket Info
      description: Get WebSocket connection details and supported events
      operationId: getWebSocketInfo
      tags:
        - WebSocket
      responses:
        "200":
          description: WebSocket information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  websocket:
                    enabled: true
                    endpoint: "/ws"
                    port: 3001
                    reconnectInterval: 5000
                  supportedEvents:
                    - "order_created"
                    - "order_updates"
                    - "auction_started"
                    - "auction_progress"
                    - "auction_won"
                    - "secret_revealed"
                    - "order_completed"
                    - "order_cancelled"
                    - "phase_transition"
                  usage:
                    connection: "ws://localhost:3001/ws"
                    authentication: "No authentication required"
                    messageFormat: "JSON with event type and data"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

components:
  schemas:
    ApiResponse:
      type: object
      required:
        - success
        - timestamp
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        data:
          type: object
          description: Response data (present on success)
        error:
          type: string
          description: Error message (present on failure)
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp of the response

    HealthCheckResponse:
      type: object
      required:
        - status
        - timestamp
        - version
        - chains
        - activeOrders
        - completedOrders
        - errorRate
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Overall service health status
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp
        version:
          type: string
          description: Service version
        chains:
          type: object
          additionalProperties:
            type: object
            properties:
              connected:
                type: boolean
              blockNumber:
                type: integer
              latency:
                type: integer
                description: Latency in milliseconds
        activeOrders:
          type: integer
          description: Number of currently active orders
        completedOrders:
          type: integer
          description: Total number of completed orders
        errorRate:
          type: number
          format: float
          description: Current error rate (0.0 to 1.0)

    GenerateOrderRequest:
      type: object
      required:
        - userAddress
        - amount
        - fromToken
        - toToken
        - fromChain
        - toChain
        - secretHash
      properties:
        userAddress:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Maker's address
        amount:
          type: string
          description: Amount to swap from source chain (in wei/smallest unit)
        fromToken:
          type: string
          description: Source token symbol or address
        toToken:
          type: string
          description: Destination token symbol or address
        fromChain:
          type: string
          enum: [ethereum, base, bsc, polygon, arbitrum]
          description: Source blockchain
        toChain:
          type: string
          enum: [near, ethereum, base, bsc, polygon, arbitrum]
          description: Destination blockchain
        secretHash:
          type: string
          description: Secret hash for HTLC

    SubmitSignedOrderRequest:
      type: object
      required:
        - orderHash
        - signedOrder
        - signature
      properties:
        orderHash:
          type: string
          pattern: "^[a-fA-F0-9]{64}$"
          description: Order hash from /orders/prepare
        signedOrder:
          type: object
          description: Signed SDK CrossChainOrder from frontend
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: User's wallet signature

    ClaimOrderRequest:
      type: object
      required:
        - resolverAddress
        - estimatedGas
        - signature
      properties:
        resolverAddress:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Resolver's address
        estimatedGas:
          type: integer
          description: Estimated gas cost for execution
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: Resolver's signature

    EscrowDeploymentConfirmation:
      type: object
      required:
        - escrowType
        - escrowAddress
        - transactionHash
        - blockNumber
        - resolverAddress
        - signature
      properties:
        escrowType:
          type: string
          enum: [src, dst]
          description: Source or destination escrow
        escrowAddress:
          type: string
          description: Deployed escrow contract address
        transactionHash:
          type: string
          description: Deployment transaction hash
        blockNumber:
          type: integer
          description: Block number of deployment
        resolverAddress:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Resolver's address
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: Resolver's signature

    UpdateOrderStateRequest:
      type: object
      required:
        - newState
        - resolverAddress
      properties:
        newState:
          type: string
          enum: [waiting-for-secret, completed, failed, cancelled]
          description: New order state
        resolverAddress:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Resolver's address

    EscrowVerificationResponse:
      type: object
      required:
        - success
        - data
        - timestamp
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        data:
          type: object
          properties:
            safe:
              type: boolean
              description: Whether it's safe to reveal the secret
            orderHash:
              type: string
              description: Order hash being verified
            srcEscrowVerified:
              type: boolean
              description: Source escrow verification status
            dstEscrowVerified:
              type: boolean
              description: Destination escrow verification status
            verification:
              type: object
              description: Detailed verification results
            issues:
              type: array
              items:
                type: string
              description: Security issues found (if any)
            message:
              type: string
              description: Human-readable result message
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp of the response

    LegacyOrderRequest:
      type: object
      required:
        - sourceChain
        - destinationChain
        - sourceToken
        - destinationToken
        - sourceAmount
        - destinationAmount
        - timeout
        - signature
        - nonce
      properties:
        sourceChain:
          type: string
          enum: [ethereum, base, bsc, polygon, arbitrum]
          description: Source blockchain
        destinationChain:
          type: string
          enum: [near]
          description: Destination blockchain
        sourceToken:
          type: string
          description: Source token symbol or address
        destinationToken:
          type: string
          description: Destination token symbol or address
        sourceAmount:
          type: string
          description: Amount to swap from source chain (in wei/smallest unit)
        destinationAmount:
          type: string
          description: Expected amount on destination chain
        timeout:
          type: integer
          format: int64
          description: Order timeout timestamp
        auctionDuration:
          type: integer
          description: Duration of auction in milliseconds (optional)
        initialRateBump:
          type: integer
          description: Initial rate bump in basis points (optional)
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: Maker's signature
        nonce:
          type: string
          description: Unique nonce for the order

    SDKOrderRequest:
      type: object
      required:
        - sdkOrder
        - signature
      properties:
        sdkOrder:
          type: object
          description: SDK-formatted order with enhanced features
          properties:
            orderInfo:
              type: object
              properties:
                srcChainId:
                  type: string
                dstChainId:
                  type: string
                srcToken:
                  type: string
                dstToken:
                  type: string
                srcAmount:
                  type: string
                dstAmount:
                  type: string
            auctionDetails:
              type: object
              properties:
                points:
                  type: array
                  items:
                    type: object
                    properties:
                      delay:
                        type: integer
                      coefficient:
                        type: number
            settlementInfo:
              type: object
              properties:
                hashLock:
                  type: object
                  properties:
                    merkleRoot:
                      type: string
                    merkleLeaves:
                      type: array
                      items:
                        type: string
                    secretHash:
                      type: string
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: Order signature

    ResolverBidRequest:
      type: object
      required:
        - orderHash
        - resolver
        - estimatedGas
        - signature
      properties:
        orderHash:
          type: string
          pattern: "^0x[a-fA-F0-9]{64}$"
          description: Hash of the order to bid on
        resolver:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Resolver's address
        estimatedGas:
          type: integer
          description: Estimated gas cost for execution
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: Resolver's signature

    SecretRevealRequest:
      type: object
      required:
        - orderHash
        - secret
        - proof
        - signature
      properties:
        orderHash:
          type: string
          pattern: "^0x[a-fA-F0-9]{64}$"
          description: Hash of the order
        secret:
          type: string
          description: Secret value for HTLC unlocking
        proof:
          type: string
          description: Merkle proof (for partial fills) or verification proof
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: Requester's signature

    RegisterResolverRequest:
      type: object
      required:
        - address
        - isKyc
      properties:
        address:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Resolver's Ethereum address
        isKyc:
          type: boolean
          description: Whether the resolver is KYC verified
        bondAmount:
          type: string
          description: Bond amount staked by resolver (optional)
        tier:
          type: integer
          minimum: 1
          maximum: 5
          description: Resolver tier (1-5, optional)
        reputation:
          type: integer
          minimum: 0
          maximum: 100
          description: Reputation score (0-100, optional)

    OrderStatus:
      type: object
      properties:
        orderHash:
          type: string
        phase:
          type: string
          enum:
            [
              submitted,
              claimed,
              src_escrow_deployed,
              dst_escrow_deployed,
              waiting-for-secret,
              completed,
            ]
        sourceEscrow:
          $ref: "#/components/schemas/EscrowDetails"
        destinationEscrow:
          $ref: "#/components/schemas/EscrowDetails"
        auction:
          $ref: "#/components/schemas/DutchAuctionState"
        secret:
          $ref: "#/components/schemas/SecretManagement"
        timelock:
          $ref: "#/components/schemas/TimelockPhase"
        isCompleted:
          type: boolean
        error:
          type: string
        events:
          type: array
          items:
            $ref: "#/components/schemas/OrderEvent"

    EscrowDetails:
      type: object
      properties:
        orderHash:
          type: string
        chain:
          type: string
        contractAddress:
          type: string
        secretHash:
          type: string
        amount:
          type: string
        timeout:
          type: integer
        creator:
          type: string
        designated:
          type: string
        isCreated:
          type: boolean
        isWithdrawn:
          type: boolean
        isCancelled:
          type: boolean
        createdAt:
          type: integer
        withdrawnAt:
          type: integer
        cancelledAt:
          type: integer
        transactionHash:
          type: string

    DutchAuctionState:
      type: object
      properties:
        orderHash:
          type: string
        startTime:
          type: integer
        duration:
          type: integer
        initialRateBump:
          type: integer
        currentRate:
          type: number
        isActive:
          type: boolean
        winner:
          type: string
        finalRate:
          type: number
        participatingResolvers:
          type: array
          items:
            type: string

    SecretManagement:
      type: object
      properties:
        orderHash:
          type: string
        secret:
          type: string
        secretHash:
          type: string
        isRevealed:
          type: boolean
        revealedAt:
          type: integer
        revealedBy:
          type: string
        merkleTree:
          type: object
          description: Merkle tree structure for secret management (if applicable)

    TimelockPhase:
      type: object
      properties:
        phase:
          type: string
          enum:
            [
              submitted,
              claimed,
              src_escrow_deployed,
              dst_escrow_deployed,
              waiting-for-secret,
              completed,
            ]
        orderHash:
          type: string
        startTime:
          type: integer
        endTime:
          type: integer
        isActive:
          type: boolean
        nextPhase:
          type: string

    OrderEvent:
      type: object
      properties:
        type:
          type: string
          enum:
            [
              order_created,
              order_updates,
              auction_started,
              auction_progress,
              auction_won,
              phase_transition,
              secret_revealed,
              order_completed,
              order_cancelled,
              error,
            ]
        timestamp:
          type: integer
        data:
          type: object
        transactionHash:
          type: string
        blockNumber:
          type: integer

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            success: false
            error: "Invalid request parameters"
            timestamp: 1640995200000

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            success: false
            error: "Order not found"
            timestamp: 1640995200000

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            success: false
            error: "Internal server error"
            timestamp: 1640995200000

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Optional JWT token for authenticated endpoints

tags:
  - name: Documentation
    description: API documentation and service information
  - name: Health
    description: Service health and status monitoring
  - name: Orders
    description: Cross-chain swap order management
  - name: Resolvers
    description: Resolver registration and bidding
  - name: Security
    description: Escrow verification and secure secret management
  - name: WebSocket
    description: Real-time event streaming

externalDocs:
  description: 1Prime Relayer Documentation
  url: https://github.com/unite-defi/blob/main/packages/relayer/README.md

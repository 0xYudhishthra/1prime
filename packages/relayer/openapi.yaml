openapi: 3.0.3
info:
  title: 1Prime Relayer Service API
  description: |
    A 1inch Fusion+ compatible relayer service that facilitates cross-chain atomic swaps between EVM chains (Ethereum, Base, BSC, Polygon, Arbitrum) and NEAR Protocol.

    This implementation follows the 1inch Fusion+ whitepaper architecture for secure cross-chain atomic swaps.

    ## Features
    - Partial Fill Support with Merkle tree-based N+1 secret management  
    - Cross-chain Escrow Verification
    - Real-time WebSocket updates
    - Modular chain support for EVM and NEAR

    ## Supported Chain Pairs
    - Ethereum ↔ NEAR
    - Base ↔ NEAR
    - BSC ↔ NEAR
    - Polygon ↔ NEAR
    - Arbitrum ↔ NEAR
  version: 1.0.0
  contact:
    name: 1Prime Team
    url: https://github.com/unite-defi
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://1prime-relayer.up.railway.app/api/v1
    description: Production server (Railway)

paths:
  /:
    get:
      summary: API Documentation
      description: Get comprehensive API documentation and available endpoints
      operationId: getApiDocumentation
      tags:
        - Documentation
      responses:
        "200":
          description: API documentation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  service: "1Prime Relayer Service"
                  version: "1.0.0"
                  description: "1inch Fusion+ compatible relayer for EVM ↔ NEAR cross-chain atomic swaps"
                  documentation: "https://github.com/unite-defi"
                  whitepaper: "https://1inch.io/assets/1inch-fusion-plus.pdf"
                  timestamp: 1640995200000
                  status: "active"
                  websocket:
                    enabled: true
                    endpoint: "/ws"
                    events:
                      [
                        "order_created",
                        "order_updates",
                        "phase_transition",
                        "secret_revealed",
                        "order_completed",
                        "order_cancelled",
                      ]
                  endpoints:
                    "POST /orders/prepare": "Generate unsigned Fusion+ order for frontend signing"
                    "POST /orders/submit": "Submit signed Fusion+ order to relayer"
                    "GET /orders": "Get all currently active orders"
                    "GET /orders/{hash}/status": "Get order status and details"
                    "GET /orders/{hash}/verify-escrows": "Verify escrows are safe for secret revelation"
                    "POST /orders/{hash}/claim": "Claim order for resolver processing"
                    "POST /orders/{hash}/escrow-deployed": "Confirm escrow deployment"
                    "POST /orders/{hash}/reveal-secret": "Request secret revelation"
                    "GET /ws-info": "Get WebSocket connection details and supported events"
                  features:
                    "Cross-Chain": "EVM ↔ NEAR bidirectional atomic swaps"
                    "SDK Integration": "Native support for 1inch Fusion+ SDK orders"
                    "Real-time Updates": "WebSocket support for live order tracking"
                    "Security Verification": "Independent on-chain escrow verification before secret reveal"
                    "State Management": "Complete order lifecycle tracking with phase transitions"
                  supportedChains:
                    evm: ["ethereum", "base", "bsc", "polygon", "arbitrum"]
                    near: ["near", "near-testnet"]
                  chainMappings:
                    "ethereum": "Ethereum Mainnet"
                    "base": "Base"
                    "bsc": "BNB Smart Chain"
                    "polygon": "Polygon"
                    "arbitrum": "Arbitrum One"
                    "near": "NEAR Mainnet"
                    "near-testnet": "NEAR Testnet"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /orders:
    get:
      summary: Get Active Orders
      description: Retrieve all currently active orders
      operationId: getActiveOrders
      tags:
        - Orders
      responses:
        "200":
          description: Active orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  - orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                    maker: "0xeb0d8736Cc2c47882f112507cc8A3355d37D2413"
                    userSrcAddress: "0xeb0d8736Cc2c47882f112507cc8A3355d37D2413"
                    userDstAddress: "user.near"
                    sourceChain: "ethereum"
                    destinationChain: "near-testnet"
                    sourceToken: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
                    destinationToken: "3e2210e1184b45b64c8a434c0a7e7b23cc04ea7eb7a6c3c32520d03d4afcb8af"
                    sourceAmount: "10000000"
                    destinationAmount: "10000000"
                    phase: "claimed"
                    assignedResolver: "0xdef456789abcdef123456789abcdef123456789a"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/prepare:
    post:
      summary: Generate Unsigned Order
      description: |
        Generate an unsigned Fusion+ order for frontend signing (Steps 3+4+5 of the cross-chain flow).

        This endpoint uses the 1inch SDK internally to create a properly structured CrossChainOrder
        with HashLock and TimeLocks. The frontend then signs this order.

        Returns the orderHash along with success/message fields for the prepared order.
        The full order details are stored in the database and can be retrieved during submission.
      operationId: generateOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateOrderRequest"
            example:
              userSrcAddress: "0xeb0d8736Cc2c47882f112507cc8A3355d37D2413"
              userDstAddress: "papasins.near"
              amount: "10000000"
              fromToken: "usdc"
              toToken: "usdc"
              fromChain: "11155111"
              toChain: "398"
              secretHash: "0xa82aec019867b7307551dc397acde18b541e742fa1a4e53df4ce3b02d462f524"
      responses:
        "200":
          description: Unsigned order generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                  success: true
                  message: "Order prepared successfully. Use this orderHash with your signature to submit."
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/submit:
    post:
      summary: Submit Signed Order
      description: |
        Submit a signed Fusion+ order to the relayer (Step 6 of the cross-chain flow).

        The order must be signed by the frontend using the unsigned order from /orders/prepare.
      operationId: submitSignedOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitSignedOrderRequest"
            example:
              orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
              signature: "0x304cf8f9e7a6dba22d1ee4ad59e9e8a35bb2e7d4c1a9f1a8b2c3d4e5f6789012345a1b2c3d4e5f6789012345a1b2c3d4e5f6789012345a1b2c3d4e5f67890123456"
      responses:
        "201":
          description: Signed order submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                  phase: "submitted"
                  assignedResolver: null
                  sourceEscrow: null
                  destinationEscrow: null

                  secret: null
                  timelock:
                    phase: "submitted"
                    orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                    startTime: 1640995200000
                    endTime: 1640995500000
                    isActive: true
                    nextPhase: "claimed"
                  isCompleted: false
                  events:
                    - type: "order_created"
                      timestamp: 1640995200000
                      data:
                        userSrcAddress: "0xeb0d8736Cc2c47882f112507cc8A3355d37D2413"
                        userDstAddress: "papasins.near"
                        sourceChain: "11155111"
                        destinationChain: "398"
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/status:
    get:
      summary: Get Order Status
      description: Retrieve the current status and details of a specific order
      operationId: getOrderStatus
      tags:
        - Orders
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^(0x)?[a-fA-F0-9]{40,70}$"
          example: "0x123abc..."
      responses:
        "200":
          description: Order status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                  phase: "src_escrow_deployed"
                  assignedResolver: "0xdef456789abcdef123456789abcdef123456789a"
                  sourceEscrow:
                    orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                    chain: "ethereum"
                    contractAddress: "0x128ce802AB730FbB360b784CA8C16dD73147649c"
                    designated: "0xdef456789abcdef123456789abcdef123456789a"
                    amount: "10000000"
                    isCreated: true
                  destinationEscrow:
                    orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                    chain: "near-testnet"
                    contractAddress: "escrow-dst-template.testnet"
                    designated: "0xdef456789abcdef123456789abcdef123456789a"
                    amount: "10000000"
                    isCreated: true

                  isCompleted: false
                timestamp: 1640995200000
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/verify-escrows:
    get:
      summary: Verify Escrows Safety
      description: |
        Perform independent on-chain verification that both source and destination escrows 
        are safe for secret revelation. This is a critical security endpoint that the frontend
        MUST call before revealing any secrets.

        **Security Features:**
        - Verifies contract existence on both chains
        - Checks escrow parameters (amount, token, secret hash)
        - Validates escrow funding status
        - Detects if escrows have already been withdrawn or cancelled
        - Confirms escrow state matches expected conditions

        **NEAR Verification:** Uses NEAR API to call `get_escrow_info()` and verify state
        **EVM Verification:** Uses 1inch contract events to detect withdrawals/cancellations
      operationId: verifyEscrowSafety
      tags:
        - Security
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^(0x)?[a-fA-F0-9]{40,70}$"
          example: "0x123abc..."
      responses:
        "200":
          description: Escrow verification completed (check safe field for result)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscrowVerificationResponse"
              examples:
                safe:
                  summary: Escrows are safe
                  value:
                    success: true
                    data:
                      safe: true
                      orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                      verification:
                        srcEscrowVerified: true
                        dstEscrowVerified: true
                        srcEscrowDetails:
                          escrowAddress: "0x128ce802AB730FbB360b784CA8C16dD73147649c"
                          chainName: "ethereum"
                          contractExists: true
                          amountMatches: true
                          tokenMatches: true
                          secretHashMatches: true
                          properlyFunded: true
                        dstEscrowDetails:
                          escrowAddress: "escrow-dst-template.testnet"
                          chainName: "near-testnet"
                          contractExists: true
                          amountMatches: true
                          tokenMatches: true
                          secretHashMatches: true
                          properlyFunded: true
                      message: "Safe to reveal secret"
                    timestamp: 1640995200000
                unsafe:
                  summary: Escrows are not safe
                  value:
                    success: false
                    data:
                      safe: false
                      orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                      verification:
                        srcEscrowVerified: false
                        dstEscrowVerified: true
                        issues:
                          - "❌ Escrow already withdrawn! Secret revealed: 0xa82aec019867b7307551dc397acde18b541e742fa1a4e53df4ce3b02d462f524"
                          - "❌ Insufficient USDC balance: expected 10000000, got 0"
                      message: "NOT safe to reveal secret"
                    timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/claim:
    post:
      summary: Claim Order
      description: |
        Claim an order for resolver processing (Step 7 of the cross-chain flow).

        Any resolver can claim unclaimed orders. This transitions the order
        to "claimed" phase and assigns it to the resolver address.
      operationId: claimOrder
      tags:
        - Resolvers
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^(0x)?[a-fA-F0-9]{40,70}$"
          example: "0x123abc..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClaimOrderRequest"
            example:
              resolverAddress: "0xdef456789abcdef123456789abcdef123456789a"
      responses:
        "200":
          description: Order claimed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  claimed: true
                  orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                  resolverAddress: "0xdef..."
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/escrow-deployed:
    post:
      summary: Confirm Escrow Deployment
      description: |
        Confirm that an escrow has been deployed (Steps 7.1 & 9.1 of the cross-chain flow).

        The assigned resolver calls this endpoint after deploying source or destination escrows
        to update the order state and provide deployment details.
      operationId: confirmEscrowDeployment
      tags:
        - Resolvers
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^(0x)?[a-fA-F0-9]{40,70}$"
          example: "0x123abc..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EscrowDeploymentConfirmation"
            example:
              escrowType: "src"
              escrowAddress: "0x789abcdef123456789abcdef123456789abcdef12"
              transactionHash: "0xdef456789abcdef123456789abcdef123456789abcdef123456789abcdef123456"
              blockNumber: 18500000
              resolverAddress: "0xabc123456789abcdef123456789abcdef123456789"
      responses:
        "200":
          description: Escrow deployment confirmed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  confirmed: true
                  orderHash: "0xa3577a7705e04caebabb32e62a231660b7f5556af20a74220d1608c2a9b62d9c"
                  escrowType: "src"
                  escrowAddress: "0x789..."
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /orders/{hash}/reveal-secret:
    post:
      summary: Request Secret Reveal
      description: |
        Request revelation of order secret after escrow verification (Step 11 of the cross-chain flow).

        **IMPORTANT:** Frontend MUST call `/orders/{hash}/verify-escrows` first to ensure
        it's safe to reveal the secret. Revealing secrets to unsafe escrows results in loss of funds.
      operationId: requestSecretReveal
      tags:
        - Security
      parameters:
        - name: hash
          in: path
          required: true
          description: Unique hash identifier of the order
          schema:
            type: string
            pattern: "^(0x)?[a-fA-F0-9]{40,70}$"
          example: "0x123abc..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretRevealRequest"
            example:
              secret: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
              proof: "0x9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba"
              signature: "0x7f6e5d4c3b2a1098765432abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef12"
      responses:
        "200":
          description: Secret reveal processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  secret: "revealed-secret-value"
                timestamp: 1640995200000
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          description: Conditions not met for secret reveal
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: false
                error: "Escrow verification not complete"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

  /ws-info:
    get:
      summary: WebSocket Info
      description: Get WebSocket connection details and supported events
      operationId: getWebSocketInfo
      tags:
        - WebSocket
      responses:
        "200":
          description: WebSocket information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: true
                data:
                  websocket:
                    enabled: true
                    endpoint: "/ws"
                    port: 3001
                    reconnectInterval: 5000
                  supportedEvents:
                    - "order_created"
                    - "order_updates"
                    - "secret_revealed"
                    - "order_completed"
                    - "order_cancelled"
                    - "phase_transition"
                  usage:
                    connection: "ws://localhost:3001/ws"
                    authentication: "No authentication required"
                    messageFormat: "JSON with event type and data"
                timestamp: 1640995200000
        "500":
          $ref: "#/components/responses/InternalError"

components:
  schemas:
    ApiResponse:
      type: object
      required:
        - success
        - timestamp
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        data:
          type: object
          description: Response data (present on success)
        error:
          type: string
          description: Error message (present on failure)
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp of the response

    GenerateOrderRequest:
      type: object
      required:
        - userSrcAddress
        - userDstAddress
        - amount
        - fromToken
        - toToken
        - fromChain
        - toChain
        - secretHash
      properties:
        userSrcAddress:
          type: string
          description: User's address on the source chain (can be EVM hex or NEAR account)
        userDstAddress:
          type: string
          description: User's address on the destination chain (can be EVM hex or NEAR account)
        amount:
          type: string
          description: Amount to swap from source chain (in wei/smallest unit)
        fromToken:
          type: string
          description: Source token symbol (e.g., "usdc", "eth", "weth")
        toToken:
          type: string
          description: Destination token symbol (e.g., "usdc", "eth", "weth")
        fromChain:
          type: string
          description: Source blockchain chain ID or name (e.g., "11155111", "ethereum", "base", "bsc", "polygon", "arbitrum")
          example: "11155111"
        toChain:
          type: string
          description: Destination blockchain chain ID or name (e.g., "398", "near", "near-testnet")
          example: "398"
        secretHash:
          type: string
          description: Secret hash for the order

    SubmitSignedOrderRequest:
      type: object
      required:
        - orderHash
        - signature
      properties:
        orderHash:
          type: string
          pattern: "^(0x)?[a-fA-F0-9]{40,70}$"
          description: Order hash from /orders/prepare
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: User's wallet signature

    ClaimOrderRequest:
      type: object
      required:
        - resolverAddress
      properties:
        resolverAddress:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Resolver's address

    EscrowDeploymentConfirmation:
      type: object
      required:
        - escrowType
        - escrowAddress
        - transactionHash
        - blockNumber
        - resolverAddress
      properties:
        escrowType:
          type: string
          enum: [src, dst]
          description: Source or destination escrow
        escrowAddress:
          type: string
          description: Deployed escrow contract address
        transactionHash:
          type: string
          description: Deployment transaction hash
        blockNumber:
          type: integer
          description: Block number of deployment
        resolverAddress:
          type: string
          pattern: "^0x[a-fA-F0-9]{40}$"
          description: Resolver's address

    EscrowVerificationResponse:
      type: object
      required:
        - success
        - data
        - timestamp
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        data:
          type: object
          properties:
            safe:
              type: boolean
              description: Whether it's safe to reveal the secret
            orderHash:
              type: string
              description: Order hash being verified
            srcEscrowVerified:
              type: boolean
              description: Source escrow verification status
            dstEscrowVerified:
              type: boolean
              description: Destination escrow verification status
            verification:
              type: object
              description: Detailed verification results
            issues:
              type: array
              items:
                type: string
              description: Security issues found (if any)
            message:
              type: string
              description: Human-readable result message
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp of the response

    SecretRevealRequest:
      type: object
      required:
        - secret
        - proof
        - signature
      properties:
        secret:
          type: string
          description: Secret value for order completion
        proof:
          type: string
          description: Merkle proof (for partial fills) or verification proof
        signature:
          type: string
          pattern: "^0x[a-fA-F0-9]{130}$"
          description: Requester's signature

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            success: false
            error: "Invalid request parameters"
            timestamp: 1640995200000

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            success: false
            error: "Order not found"
            timestamp: 1640995200000

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            success: false
            error: "Internal server error"
            timestamp: 1640995200000

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Optional JWT token for authenticated endpoints

tags:
  - name: Documentation
    description: API documentation and service information
  - name: Orders
    description: Cross-chain swap order management
  - name: Resolvers
    description: Resolver order claiming and escrow deployment
  - name: Security
    description: Escrow verification and secure secret management
  - name: WebSocket
    description: Real-time event streaming

externalDocs:
  description: 1Prime Relayer Documentation
  url: https://github.com/unite-defi/blob/main/packages/relayer/README.md

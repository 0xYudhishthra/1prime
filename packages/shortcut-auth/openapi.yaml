openapi: 3.1.3
info:
  title: Cross-Chain Swap API
  description: |
    A proof-of-concept API for cross-chain swaps between EVM chains and NEAR protocol.
    Designed for Apple Shortcuts integration with Siri voice control.

    ## Authentication Flow
    1. Sign up with email/password to get auth token
    2. Store token in Downloads/ folder for Shortcuts access
    3. EVM and NEAR wallets are automatically generated and linked

    ## Security Note
    This is a proof-of-concept with simplified security for validation purposes.
  version: 1.0.0
  contact:
    name: Cross-Chain Swap Team
  license:
    name: MIT

servers:
  - url: https://your-api-domain.com
    description: Production server
  - url: http://localhost:8787
    description: Development server

security:
  - BearerAuth: []

paths:
  /sign-up/email:
    post:
      tags:
        - Authentication
      summary: Create new user account with email/password
      description: |
        Creates a new user account and automatically generates both EVM and NEAR wallets.
        Returns authentication token that should be stored in Downloads/ folder.
      security: [] # No auth required for signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 6
                  maxLength: 10
                  example: "password123"
      responses:
        "200":
          description: Account created successfully
          content:
            application/json:
              schema:
                type: string
                description: Bearer token for authentication
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "500":
          description: Failed to create account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                evm_error:
                  value:
                    error: "Failed to create evm account"
                near_error:
                  value:
                    error: "Failed to create near account"

  /api/send-transaction:
    post:
      tags:
        - EVM Transactions
      summary: Send EVM transaction
      description: Sends a test EVM transaction using the user's smart wallet
      responses:
        "200":
          description: Transaction sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  txnHash:
                    type: string
                    description: Transaction hash
                    example: "0x1234567890abcdef..."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /api/send-near-transaction:
    post:
      tags:
        - NEAR Transactions
      summary: Send NEAR transaction
      description: Sends a test NEAR transaction (0.1 NEAR to self)
      responses:
        "200":
          description: Transaction sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    description: NEAR transaction result
                    properties:
                      final_execution_status:
                        type: string
                      transaction:
                        type: object
                      receipts_outcome:
                        type: array
                        items:
                          type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          description: Server error or no NEAR account found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                no_account:
                  value:
                    error: "No near account found"

  /api/random-number:
    get:
      tags:
        - Test Endpoints
      summary: Get random number (test endpoint)
      description: Returns a random number to test authentication
      responses:
        "200":
          description: Random number generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: integer
                    minimum: 0
                    maximum: 99
                    example: 42
        "401":
          $ref: "#/components/responses/Unauthorized"

  /create-near-account:
    get:
      tags:
        - Test Endpoints
      summary: Create test NEAR account
      description: Test endpoint to create a NEAR account (development only)
      security: []
      responses:
        "200":
          description: NEAR account created
          content:
            application/json:
              schema:
                type: object
                properties:
                  nearAccount:
                    type: object
                    properties:
                      accountId:
                        type: string
                        example: "4ervtktfnuw7kwxaervheolyggrdncxo.testnet"
                      keyPair:
                        type: object
                      transaction:
                        type: object
        "500":
          $ref: "#/components/responses/ServerError"

  /api/wallet/supported-chains:
    get:
      tags:
        - Wallet
      summary: Get supported EVM testnet chains
      description: Returns list of supported EVM testnet chains for cross-chain operations
      security: [] # No auth required
      responses:
        "200":
          description: Supported chains retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chains:
                    type: array
                    items:
                      type: object
                      properties:
                        chainId:
                          type: integer
                          example: 421614
                        name:
                          type: string
                          example: "Arbitrum Sepolia"
              example:
                chains:
                  - chainId: 11155111
                    name: "Ethereum Sepolia"
                  - chainId: 421614
                    name: "Arbitrum Sepolia"
                  - chainId: 11155420
                    name: "Optimism Sepolia"

  /api/wallet/addresses:
    get:
      tags:
        - Wallet
      summary: Get wallet addresses
      description: Returns both EVM and NEAR wallet addresses. EVM address works on all supported testnet chains.
      responses:
        "200":
          description: Wallet addresses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  evm:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "0x321fBF99d74b02f405CbD7D5b59F6D01A047814e"
                      note:
                        type: string
                        example: "Same address works on all supported EVM chains (testnets)"
                  near:
                    type: object
                    properties:
                      accountId:
                        type: string
                        example: "ssxkqow2xbmcjkoxct6sezew6op1snm3.testnet"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Wallet not found"

  /api/wallet/export-private-key:
    get:
      tags:
        - Wallet
      summary: Export private key (DEVELOPMENT ONLY)
      description: |
        ⚠️ DEVELOPMENT ONLY - Exports the signer private key for MetaMask import.

        **SECURITY WARNING**: This endpoint exposes sensitive private key information.
        Remove this endpoint in production environments.

        The same private key works on all EVM chains but generates different smart wallet addresses.
      responses:
        "200":
          description: Private key exported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  warning:
                    type: string
                    example: "⚠️ DEVELOPMENT ONLY - Keep this private key secure! Never share it!"
                  signerPrivateKey:
                    type: string
                    description: Private key for MetaMask import (keep secure!)
                    example: "0x1234567890abcdef..."
                  signerAddress:
                    type: string
                    description: EOA address derived from private key (same on all chains)
                    example: "0xabcdef1234567890..."
                  smartWalletInfo:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "0x321fBF99d74b02f405CbD7D5b59F6D01A047814e"
                      deployedOnChain:
                        type: integer
                        example: 421614
                      kernelVersion:
                        type: string
                        example: "v3.1"
                  chains:
                    type: array
                    items:
                      type: object
                      properties:
                        chainId:
                          type: integer
                          example: 421614
                        name:
                          type: string
                          example: "Arbitrum Sepolia"
                        signerAddress:
                          type: string
                          description: EOA address (same across all chains)
                          example: "0xabcdef1234567890..."
                        smartWalletAddress:
                          type: string
                          description: Smart wallet address
                          example: "0x321fBF99d74b02f405CbD7D5b59F6D01A047814e"
                        note:
                          type: string
                          example: "Smart wallet addresses may differ on different chains if deployed separately"
                  instructions:
                    type: object
                    properties:
                      metamask:
                        type: string
                        example: "Import the 'signerPrivateKey' into MetaMask. You'll see the 'signerAddress', not the smart wallet address."
                      networks:
                        type: string
                        example: "Add testnet networks to MetaMask to see your signer account on different chains."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Wallet not found"

  /api/wallet/balances:
    get:
      tags:
        - Wallet
      summary: Get multi-chain wallet balances for specific testnet chain
      description: Returns current balances for both EVM (specific testnet chain) and NEAR wallets
      parameters:
        - name: chainId
          in: query
          required: true
          description: EVM Chain ID (11155111=Ethereum Sepolia, 421614=Arbitrum Sepolia, 11155420=Optimism Sepolia)
          schema:
            type: integer
            enum: [11155111, 421614, 11155420]
            example: 421614
      responses:
        "200":
          description: Wallet balances retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  evm:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "0x321fBF99d74b02f405CbD7D5b59F6D01A047814e"
                      chainId:
                        type: integer
                        example: 421614
                      chainName:
                        type: string
                        example: "Arbitrum Sepolia"
                      balance:
                        type: object
                        properties:
                          raw:
                            type: string
                            description: Balance in wei (smallest unit)
                            example: "1000000000000000000"
                          formatted:
                            type: string
                            description: Human-readable balance
                            example: "1.0"
                          symbol:
                            type: string
                            example: "ETH"
                  near:
                    type: object
                    properties:
                      accountId:
                        type: string
                        example: "ssxkqow2xbmcjkoxct6sezew6op1snm3.testnet"
                      balance:
                        type: object
                        properties:
                          raw:
                            type: string
                            description: Balance in yoctoNEAR (smallest unit)
                            example: "5000000000000000000000000"
                          formatted:
                            type: string
                            description: Human-readable balance
                            example: "5.0000"
                          symbol:
                            type: string
                            example: "NEAR"
        "400":
          description: Missing or invalid chainId parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                missing_chain:
                  value:
                    error: "chainId query parameter is required"
                invalid_chain:
                  value:
                    error: "Invalid chainId parameter"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Wallet not found"
        "500":
          description: Failed to fetch balances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Failed to fetch balances"

  /api/**:
    get:
      tags:
        - Authentication
      summary: Better-Auth endpoints
      description: |
        Handles various authentication endpoints provided by better-auth library.
        These include session management, token refresh, etc.
      responses:
        "200":
          description: Varies by specific endpoint
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Authentication
      summary: Better-Auth endpoints
      description: |
        Handles various authentication endpoints provided by better-auth library.
        These include session management, token refresh, etc.
      responses:
        "200":
          description: Varies by specific endpoint
        "401":
          $ref: "#/components/responses/Unauthorized"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Bearer token obtained from /sign-up/email endpoint.
        Store this token in Downloads/ folder for Apple Shortcuts access.

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: "Unauthorized"

    WalletInfo:
      type: object
      properties:
        evm:
          type: object
          properties:
            smartAccountAddress:
              type: string
              example: "0x1234567890abcdef..."
            chainId:
              type: integer
              example: 421614
            kernelVersion:
              type: string
              example: "v3.1"
        near:
          type: object
          properties:
            accountId:
              type: string
              example: "user123.testnet"

  responses:
    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Unauthorized"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

tags:
  - name: Authentication
    description: User authentication and account management
  - name: Wallet
    description: Wallet address and balance operations
  - name: EVM Transactions
    description: Ethereum Virtual Machine transaction operations
  - name: NEAR Transactions
    description: NEAR Protocol transaction operations
  - name: Test Endpoints
    description: Development and testing endpoints

# Future endpoints for UX flow completion
x-future-endpoints:
  deposit:
    - GET /api/deposit/address/{chain} - Get deposit address for specific chain
    - POST /api/deposit/verify - Verify deposit transaction

  swap:
    - GET /api/swap/chains - Get supported EVM chains (deprecated - use /api/wallet/supported-chains)
    - GET /api/swap/tokens/{chain} - Get supported tokens for chain
    - POST /api/swap/quote - Get swap quote using 1inch Fusion+
    - POST /api/swap/execute - Execute swap order
    - GET /api/swap/status/{orderId} - Check swap status
